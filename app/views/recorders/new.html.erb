<div id='location_recorder'></div>     
<script>       
  var locationRecorder = $('#location_recorder')[0]
  $.jRecorder(
    {
      host: "http://localhost:3000/recorders/new?filename=audio.wav",
      callback_started_recording: function(){callback_started(); },
      callback_stopped_recording: function(){callback_stopped(); },
      callback_activityLevel: function(level){callback_activityLevel(level); },
      callback_activityTime: function(time){callback_activityTime(time);},
      callback_finished_sending: function(time){ callback_finished_sending() },
      swf_path : "app/assets/swfs/jRecorder.swf",
    }, $(locationRecorder)
  );
</script> 

<div style="background-color: #eeeeee;border:1px solid #cccccc">
  
  Time: <span id="time">00:00</span>
  
</div>


<div>
  Level: <span id="level"></span>
</div>  

<div id="levelbase" style="width:200px;height:20px;background-color:#ffff00">
  
  <div id="levelbar" style="height:19px; width:2px;background-color:red"></div>
  
</div>

<div>
  Status: <span id="status"></status>
</div> 


<div>
  
<input type="button" id="record" value="Record" style="color:red">  
<p>This Record button trigger the record event. See the javascript example in the bottom of the page. (View Source in your browser).
  
<pre>
$('#record').click(function(){
                    
    $.jRecorder.record(30); //record up to 30 sec and stops automatically
                   
   })
</pre>
  </p>  


<hr/>

<input type="button" id="stop" value="Stop">

<p>This Stop button trigger the stop record event. 
  
  <pre>
  Onclick of this button trigger  $.jRecorder.sendData() which send the data to the Server
  </pre>
<hr/>

  
<input type="button" id="send" value="Send Data">

<p>This SendData button trigger the sendData event to flash to send the wav data to Server (configured in the host parameter).  
  
  
<hr/>
  
<pre>
$('#stop').click(function(){
                    
    $.jRecorder.stop();
                   
   })
</pre>
  </p>  


<hr/>


</div>


 

<p>
  Time area is used to update the time. There is an event Listener which update the recording time dynamically.
  <pre>
    
    callback_activityTime:     function(time){callback_activityTime(time);  //see the initialisation
    
    //function callback
    function callback_activityTime(time)
     {
      
      
       $('#time').html(time);
       
     }
    
  </pre>  
</p>  
